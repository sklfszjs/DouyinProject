// Code generated by hertz generator.

package douyin_core

import (
	"context"

	douyin_core "github.com/cloudwego/biz/model/douyin_core"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"gorm.io/driver/mysql"
	
  "gorm.io/gorm"
  "fmt"
)

// CreateUserResponse .
// @router /douyin/user/ [GET]
func CreateUserResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin_core.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp :=UserService(req) 

	c.JSON(consts.StatusOK, resp)
}

func UserService(req douyin_core.DouyinUserRequest) douyin_core.DouyinUserResponse{
	db, err := gorm.Open(
		mysql.Open("root:@tcp(127.0.0.1:3306)/douyin?charset=utf8mb4&parseTime=True&loc=Local"),
		&gorm.Config{})
	if err != nil {
		fmt.Println("数据库链接错误", err)
	}
  userid:=req.UserId
  token:=req.Token
  users:=make([]*douyin_core.User,0)
  result:=db.Where("Id = ?",userid).Where("Token = ?",token).Find(&users)
  if result.RowsAffected> 0 {
    if result.RowsAffected> 1 {
      panic("same user in db")
    }
    fmt.Println("user service success")
    return douyin_core.DouyinUserResponse{
      StatusCode:0,
      StatusMsg:"user service success",
      User:users[0],
    }
  }else{
    fmt.Println("wrong token")
    return douyin_core.DouyinUserResponse{
      StatusCode:1,
      StatusMsg:"wrong token",
    }
  }
  
}
