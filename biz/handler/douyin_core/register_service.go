// Code generated by hertz generator.

package douyin_core

import (
	"context"

	"fmt"

	douyin_core "github.com/cloudwego/biz/model/douyin_core"
	"github.com/cloudwego/biz/utils"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// CreateRegisterResponse .
// @router /douyin/user/register/ [POST]
func CreateRegisterResponse(ctx context.Context, c *app.RequestContext) {
	var err error
	var req douyin_core.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	fmt.Printf("request is %#v\n", req)
	resp := UserRegister(req)

	c.JSON(consts.StatusOK, resp)
}

func UserRegister(req douyin_core.DouyinUserRegisterRequest) douyin_core.DouyinUserRegisterResponse {
	db := utils.GetDBConnPool().GetConn()
	defer utils.GetDBConnPool().ReturnConn(db)

	username := req.Username
	password := req.Password
	fmt.Println(username, password)
	password = utils.AesEncrypt(username, password)
	fmt.Println(password)
	users := make([]*douyin_core.User, 0)
	fmt.Println(db)
	tx := db.Begin()

	result := tx.Where("Name = ?", username).Find(&users)
	token := utils.AesEncrypt(username, password)
	if result.RowsAffected == 0 {
		fmt.Println("new user")
		tx.Create(&douyin_core.User{
			Token: token,
			Name:  username,
		})
		tx.Create(&douyin_core.DouyinUserLoginRequest{
			Username: username,
			Password: password,
		})
		result = tx.Where("Name = ?", username).Find(&users)
		tx.Commit()
		return douyin_core.DouyinUserRegisterResponse{
			StatusCode: 0,
			StatusMsg:  "register success",
			UserId:     users[0].Id,
			Token:      users[0].Token,
		}
	} else {
		tx.Rollback()
		fmt.Println("user exist")
		return douyin_core.DouyinUserRegisterResponse{
			StatusCode: 1,
			StatusMsg:  "user name repeat",
		}
	}

}
